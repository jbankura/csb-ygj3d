{"version":3,"sources":["Workorder.jsx","DateTable.jsx","WorkorderContainer.jsx","App.js","index.js"],"names":["Workorder","props","className","onDragStart","e","dataTransfer","setData","JSON","stringify","jobIndex","isDateTable","columnIndex","rowIndex","draggable","name","job","DateTable","allowDrop","ev","preventDefault","dates","map","item","dateIndex","Date","toDateString","tableData","arr","index","employeeList","Name","length","onDragOver","onDrop","tempData","selectedWorkOrder","parse","getData","dragRowIndex","dragColumnIndex","tempWorkorderList","workorderList","workOrderIndex","workorders","findIndex","splice","setWorkorderList","setTableData","handleDropOnCell","WorkorderContainer","jobname","push","jobWorkOrders","forEach","App","useState","setEmployeeList","workorderResp","setWorkorderResp","fetchEmpData","a","fetch","then","res","json","temp","Employess","emp","fetchWorkorderData","useEffect","onClick","data","obj","found","i","j","Employee","toISOString","payload","console","log","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.c3a66178.chunk.js","sourcesContent":["const Workorder = (props) => {\n  const handleDrag = (e) => {\n    e.dataTransfer.setData(\"workOrder\", JSON.stringify(props));\n    e.dataTransfer.setData(\"jobIndex\", props.jobIndex);\n    if (props.isDateTable) {\n      e.dataTransfer.setData(\"isDragFromTable\", true);\n      e.dataTransfer.setData(\"columnIndex\", props.columnIndex);\n      e.dataTransfer.setData(\"rowIndex\", props.rowIndex);\n    }\n  };\n  return (\n    <div className=\"workOrder\" onDragStart={handleDrag} draggable>\n      <div className=\"workOrderName\">{props.name}</div>\n      <div className=\"workOrderJob\">{props.job}</div>\n    </div>\n  );\n};\n\nexport default Workorder;\n","import Workorder from \"./Workorder\";\n\nconst DateTable = (props) => {\n  const allowDrop = (ev) => {\n    ev.preventDefault();\n  };\n  const handleDropOnCell = (e, rowIndex, columnIndex) => {\n    const tempData = [...props.tableData];\n    const selectedWorkOrder = JSON.parse(e.dataTransfer.getData(\"workOrder\"));\n    if (tempData[rowIndex][columnIndex]) return;\n    tempData[rowIndex][columnIndex] = selectedWorkOrder;\n    const isDragFromTable = e.dataTransfer.getData(\"isDragFromTable\");\n    if (isDragFromTable) {\n      const dragRowIndex = e.dataTransfer.getData(\"rowIndex\");\n      const dragColumnIndex = e.dataTransfer.getData(\"columnIndex\");\n      tempData[dragRowIndex][dragColumnIndex] = \"\";\n    } else {\n      const jobIndex = e.dataTransfer.getData(\"jobIndex\");\n      const tempWorkorderList = [...props.workorderList];\n      const workOrderIndex = tempWorkorderList[jobIndex].workorders.findIndex(\n        (item) => item.name === selectedWorkOrder.name\n      );\n      tempWorkorderList[jobIndex].workorders.splice(workOrderIndex, 1);\n      props.setWorkorderList(tempWorkorderList);\n    }\n    props.setTableData(tempData);\n  };\n  return (\n    <div>\n      <div className=\"flex\">\n        <div className=\"tableContainer\">\n          <div className=\"flex\">\n            <div className=\"dateTableCell noBorder\" />\n            <div className=\"tableHeader\">\n              {props.dates.map((item, dateIndex) => (\n                <div className=\"dateTableCell\" key={dateIndex}>\n                  {new Date(item).toDateString()}\n                </div>\n              ))}\n            </div>\n          </div>\n          {props.tableData.map((arr, index) => (\n            <div className=\"flex\" key={index}>\n              <div className=\"dateTableCell dateTableRowName\">\n                {props.employeeList[index]?.Name}\n              </div>\n              <div\n                className={`dateTableRow ${\n                  index === props.employeeList.length - 1 ? \"last\" : \"\"\n                }`}\n              >\n                {arr.map((item, dateIndex) => (\n                  <div\n                    className=\"dateTableCell\"\n                    key={dateIndex}\n                    onDragOver={allowDrop}\n                    onDrop={(e) => handleDropOnCell(e, index, dateIndex)}\n                  >\n                    {item && (\n                      <Workorder\n                        {...item}\n                        rowIndex={index}\n                        columnIndex={dateIndex}\n                        isDateTable\n                      />\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DateTable;\n","import Workorder from \"./Workorder\";\n\nconst WorkorderContainer = (props) => {\n  const allowDrop = (ev) => {\n    ev.preventDefault();\n  };\n  const handleDropOnCell = (e) => {\n    const tempData = [...props.tableData];\n    const selectedWorkOrder = JSON.parse(e.dataTransfer.getData(\"workOrder\"));\n    const isDragFromTable = e.dataTransfer.getData(\"isDragFromTable\");\n    if (isDragFromTable) {\n      const dragRowIndex = e.dataTransfer.getData(\"rowIndex\");\n      const dragColumnIndex = e.dataTransfer.getData(\"columnIndex\");\n      tempData[dragRowIndex][dragColumnIndex] = \"\";\n      const tempWorkorderList = [...props.workorderList];\n      const jobIndex = tempWorkorderList.findIndex(\n        (item) => item.jobname === selectedWorkOrder.job\n      );\n      tempWorkorderList[jobIndex].workorders.push({\n        name: selectedWorkOrder.name,\n        Date: selectedWorkOrder.Date\n      });\n      props.setWorkorderList(tempWorkorderList);\n      props.setTableData(tempData);\n    }\n  };\n  return (\n    <div>\n      {props.workorderList.map((job, jobIndex) => {\n        const jobWorkOrders = {};\n        job.workorders.forEach((item) => {\n          jobWorkOrders[new Date(item.Date).toDateString()] = item;\n        });\n        return (\n          <div\n            className=\"flex\"\n            key={jobIndex}\n            onDragOver={allowDrop}\n            onDrop={handleDropOnCell}\n          >\n            <div className=\"workOrderCell\" />\n            <div className=\"flex\">\n              {props.dates.map((item, dateIndex) => (\n                <div className=\"workOrderCell\" key={dateIndex}>\n                  {jobWorkOrders[new Date(item).toDateString()] && (\n                    <Workorder\n                      {...jobWorkOrders[new Date(item).toDateString()]}\n                      job={job.jobname}\n                      jobIndex={jobIndex}\n                    />\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default WorkorderContainer;\n","import { useEffect, useState } from \"react\";\nimport DateTable from \"./DateTable\";\nimport \"./styles.css\";\nimport WorkorderContainer from \"./WorkorderContainer\";\nconst dates = [\n  \"2020-04-20\",\n  \"2020-04-21\",\n  \"2020-04-22\",\n  \"2020-04-23\",\n  \"2020-04-24\",\n  \"2020-04-25\"\n];\nexport default function App() {\n  const [employeeList, setEmployeeList] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [workorderList, setWorkorderList] = useState([]);\n  const [workorderResp, setWorkorderResp] = useState(null);\n  const fetchEmpData = async () => {\n    const res = await fetch(\n      \"https://api.jsonbin.io/b/610f7dafd5667e403a3b61d2\"\n    ).then((res) => res.json());\n    const temp = res.Employess.map((emp) => {\n      return dates.map(() => \"\");\n    });\n    setTableData(temp);\n    setEmployeeList(res.Employess);\n  };\n  const fetchWorkorderData = async () => {\n    const res = await fetch(\n      \"https://api.jsonbin.io/b/610f9606e1b0604017a8bdbd\"\n    ).then((res) => res.json());\n    setWorkorderList(res.job);\n    setWorkorderResp(JSON.parse(JSON.stringify(res.job)));\n  };\n  useEffect(() => {\n    fetchEmpData();\n    fetchWorkorderData();\n  }, []);\n  const saveData = () => {\n    const data = [...workorderResp];\n    data.forEach((obj) => {\n      obj.workorders.forEach((item) => {\n        let found = false;\n        for (let i = 0; i < employeeList.length; i++) {\n          for (let j = 0; j < dates.length; j++) {\n            if (tableData[i][j].name === item.name) {\n              item.Employee = employeeList[i].Name;\n              item.Date = new Date(dates[j]).toISOString();\n              found = true;\n              break;\n            }\n          }\n          if (found) break;\n        }\n      });\n    });\n    const payload = { job: data };\n    console.log(payload);\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <div />\n        <h3>\n          <u>WorkOrder Assignment Tool</u>\n        </h3>\n        <div className=\"saveBtn\" onClick={saveData}>\n          Save\n        </div>\n      </div>\n      <DateTable\n        employeeList={employeeList}\n        dates={dates}\n        tableData={tableData}\n        setTableData={setTableData}\n        workorderList={workorderList}\n        setWorkorderList={setWorkorderList}\n      />\n      <WorkorderContainer\n        dates={dates}\n        tableData={tableData}\n        setTableData={setTableData}\n        workorderList={workorderList}\n        setWorkorderList={setWorkorderList}\n      />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}